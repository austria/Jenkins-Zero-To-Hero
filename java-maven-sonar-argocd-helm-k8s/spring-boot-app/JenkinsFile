pipeline {
  agent any
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'main', url: 'https://github.com/austria/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'rm -rf java-maven-sonar-argocd-helm-k8s/spring-boot-app/target'

        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.250.239.166:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
   stage("push to docker hub") {
environment {
        DOCKER_IMAGE = "mehranabbasi/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
       // REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
            steps {
                echo "pushing the image to docker hub"
                withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
                    sh 'docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'               
                // Tag the local image
                sh "docker tag ${DOCKER_IMAGE} ${DOCKER_IMAGE}"
                
                // Push the image to Docker Hub
                sh "docker push ${DOCKER_IMAGE}"
                   
                }
            }
        }
        
        stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
            GIT_USER_NAME = "austria"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                 sh 'git clean -fdX'
                sh '''
                    git config user.email "mehran.abbasi93@gmail.com"
                    git config user.name "austria"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s|image: mehranabbasi/ultimate-cicd:.*|image: mehranabbasi/ultimate-cicd:${BUILD_NUMBER}|" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }


 stage('Remove Old Docker Images') {
    steps {
      script {
        def currentImage = "mehranabbasi/ultimate-cicd:${BUILD_NUMBER}"
        def oldImagePrefix = "mehranabbasi/ultimate-cicd:"

        // Get a list of all Docker images with the specified prefix
        def oldImages = sh(script: "docker images --filter=reference='${oldImagePrefix}*' --format '{{.Repository}}:{{.Tag}}'", returnStdout: true).trim().split("\n")

        // Remove each old image except the current one
        oldImages.each { image ->
          if (image != currentImage) {
            sh "docker rmi $image"
          }
        }
      }
    }
  }


   
  }
}
